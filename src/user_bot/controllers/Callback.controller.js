// import { adminBot } from '../../admin_bot/index.js';
// import paymentProcessHelper from '../../db/helpers/payment.process.helper.js';
// import paymentService from '../../db/services/Payment.service.js';
// import config from '../../config/config.js';
// import screener from '../../screener/index.js';
// import userService from '../../db/services/User.service.js';

import managerService from '../../db/services/Manager.service.js';
import orderService from '../../db/services/Order.service.js';

class CallbackController {
    async resetMenu(msg, bot) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;

            await bot.editMessageText(
                `*–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '–ó\'—î–¥–Ω–∞—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `connectManager` }],
                            [{ text: '–£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: `orders|0` }],
                            [{ text: '–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: `lastOrders` }],
                            [{ text: '–ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é', callback_data: `about` }],
                            [{ text: '–ü—Ä–æ—Ñ—ñ–ª—å', callback_data: `profile` }]
                        ]
                    })
                }
            );
        } catch (error) {
            console.log(error.stack);
        }
    }


    async about(msg, bot) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;

            await bot.editMessageText(
                `*Evergreen*\n\n` +
                `\`Evergreen\` ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ-—Å–µ—Ä–≤—ñ—Å–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—Ä–æ–±—Ü—ñ IT –ø—Ä–æ–µ–∫—Ç—ñ–≤ —ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ ¬´–∑ –Ω—É–ª—è¬ª, –∑–∞–ø—É—Å–∫—É —Ü–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ —É –±—ñ–∑–Ω–µ—Å –∑–∞–º–æ–≤–Ω–∏–∫–∞ —Ç–∞ –ø–æ–¥–∞–ª—å—à–æ–º—É —Ä–æ–∑–≤–∏—Ç–∫—É.`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                        ]
                    })
                }
            );
        } catch (error) {
            console.log(error.stack);
        }
    }


    async profile(msg, bot, userData) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;



            await bot.editMessageText(
                `*–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å*\n\n` +
                `üßë‚Äçüíª ${userData.name}, ${userData.surname}\n\n` +
                `üìû ${userData.phone}\n\n` +
                `üèô ${userData.place}`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                        ]
                    })
                }
            );
        } catch (error) {
            console.log(error.stack);
        }
    }


    async ordersMenu(msg, bot, actionData) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;
            const page = +actionData[0];

            const chunkOrders = (orders, chunkLength) => {
                const result = [];

                for (let orderIndex = 0; orderIndex < orders.length; orderIndex += chunkLength) {
                    const chunk = orders.slice(orderIndex, orderIndex + chunkLength);
                    result.push(chunk);
                }

                return result;
            }

            const ordersList = await orderService.getOrdersByUserId(chatId);
            if(!ordersList || ordersList.length === 0) {
                await bot.editMessageText(
                    `*–£ –≤–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å*`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                            ]
                        })
                    }
                );
                return;
            }
            // console.log('ordersList :>> ', ordersList);

            const chunkOrdersList = chunkOrders(ordersList, 2);

            const orders = chunkOrdersList[page];
            // console.log('chunkOrdersList :>> ', chunkOrdersList);

            if (!orders) return;

            await bot.editMessageText(
                `*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n` +
                `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}\n\n` +
                (() => {
                    return orders.map((order) => {
                        return `*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è* \`${order.id}\`\n` +
                            `–°—É–º–∞: \`${order.sum}\` –≥—Ä–Ω\n\n`
                    }).join('\n')
                })(),
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: (
                            () => {
                                const ikeyboard = [];
                                const nav = [];
                                if (page > 0) {
                                    nav.push({ text: '<', callback_data: `orders|${page - 1}` })
                                }

                                nav.push({ text: '-', callback_data: `-` });

                                if (page < chunkOrdersList.length - 1) {
                                    nav.push({ text: '>', callback_data: `orders|${page + 1}` })
                                }

                                ikeyboard.push(nav);


                                ikeyboard.push([{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]);

                                return ikeyboard;
                            }
                        )()

                    })
                }
            );

        } catch (error) {
            console.log(error.stack);
        }
    }


    async lastOrders(msg, bot) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;

            let ordersList = await orderService.getOrdersByUserId(chatId);
            if(!ordersList || ordersList.length === 0) {
                await bot.editMessageText(
                    `*–£ –≤–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å*`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                            ]
                        })
                    }
                );
                return;
            }
            console.log('ordersList :>> ', ordersList);
            if(ordersList.length > 5) {
                ordersList = ordersList.splice(ordersList.length-5, 5);
            }


            await bot.editMessageText(
                `*–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n` +
                (() => {
                    return ordersList.map((order) => {
                        return `*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è* \`${order.id}\`\n` +
                            `–°—É–º–∞: \`${order.sum}\` –≥—Ä–Ω\n\n`
                    }).join('\n')
                })(),
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: (
                            () => {
                                const ikeyboard = [];
                                
                                ikeyboard.push([{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]);

                                return ikeyboard;
                            }
                        )()

                    })
                }
            );

        } catch (error) {
            console.log(error.stack);
        }
    }


    async connectManager(msg, bot, userData) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;


            const managers = await managerService.getFreeManagers();

            if(!managers || managers.length === 0) {
                await bot.editMessageText(
                    `*–ü–æ–∫–∏ —â–æ –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–µ–º–∞—î, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ*\n\n`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                            ]
                        })
                    }
                );
            }

            const manager = managers[0];
            await managerService.updateManager(manager.id, {
                user_chat_id: chatId,
                status: 'busy'
            });


            await bot.sendMessage(
                manager.telegramId,
                '*–ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:*\n' +
                `üßë‚Äçüíª ${userData.name}, ${userData.surname}\n\n` +
                `üìû ${userData.phone}\n\n` +
                `üèô ${userData.place}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚ùå –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è', callback_data: `cancel|connection` }]
                        ]
                    })
                }
            );


            await bot.editMessageText(
                `*–û–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏*\n\n`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚ùå –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: `menu` }]
                        ]
                    })
                }
            );
        } catch (error) {
            console.log(error.stack);
        }
    }

    async cancel(msg, bot, actionData) {
        try {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;
            const cancelAction = actionData[0];

            if (cancelAction === 'connection') {
                const manager = await managerService.getManagerByTelegramId(chatId);
                if(manager) {
                    managerService.updateManager(manager.id, {
                        user_chat_id: null,
                        status: 'free'
                    });
                }

                await bot.editMessageText(
                    msg.text +
                    `\n\n*–ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–µ!*`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                            ]
                        })
                    }
                );
            }

        } catch (error) {
            console.log(error.stack);
        }
    }

}

const callbackController = new CallbackController();


export default callbackController;